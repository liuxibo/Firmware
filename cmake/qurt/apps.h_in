/* builtin command list - automatically generated, do not edit */
#include <string>
#include <map>
#include <stdio.h>

#include <px4_tasks.h>
#include <px4_posix.h>
#include <px4_log.h>
#include <stdlib.h>

using namespace std;

extern void px4_show_devices(void);

extern "C" {
${builtin_apps_decl_string}
static int shutdown_main(int argc, char *argv[]);
static int list_tasks_main(int argc, char *argv[]);
static int list_files_main(int argc, char *argv[]);
static int list_devices_main(int argc, char *argv[]);
static int list_topics_main(int argc, char *argv[]);
static int sleep_main(int argc, char *argv[]);
static int wait_for_topic(int argc, char *argv[]);
}


void init_app_map(map<string,px4_main_t> &apps)
{
${builtin_apps_string}
	apps["shutdown"] = shutdown_main;
	apps["list_tasks"] = list_tasks_main;
	apps["list_files"] = list_files_main;
	apps["list_devices"] = list_devices_main;
	apps["list_topics"] = list_topics_main;
	apps["sleep"] = sleep_main;
	apps["wait_for_topic"] = wait_for_topic;
}

void list_builtins(map<string,px4_main_t> &apps)
{
	PX4_INFO("Builtin Commands:\\n");
	for (map<string,px4_main_t>::iterator it=apps.begin(); it!=apps.end(); ++it)
		PX4_INFO("%s : 0x%x\n", (it->first).c_str(), it->second);
}

static int shutdown_main(int argc, char *argv[])
{
	printf("Shutting down\\n");
	exit(0);
}

static int list_tasks_main(int argc, char *argv[])
{
	px4_show_tasks();
	return 0;
}

static int list_devices_main(int argc, char *argv[])
{
	px4_show_devices();
	return 0;
}

static int list_topics_main(int argc, char *argv[])
{
	px4_show_topics();
	return 0;
}
static int list_files_main(int argc, char *argv[])
{
	px4_show_files();
	return 0;
}
static int sleep_main(int argc, char *argv[])
{
        if (argc != 2) {
           PX4_WARN( "Usage: sleep <seconds>" );
           return 1;
        }

        unsigned long usecs = ( (unsigned long) atol( argv[1] ) ) * 1000 * 1000;
        PX4_INFO("Sleeping for %s, %ld",argv[1],usecs);
        usleep( usecs );
        return 0;
}

#include "uORB/uORB.h"

static int wait_for_topic(int argc, char *argv[])
{
	if (argc < 2 || argc > 3) {
		PX4_WARN("Usage: wait_for_topic <topic> [timeout_sec]");
		return 1;
	}

	struct orb_metadata meta = { .o_name = argv[1],
				     .o_size = 0,
				     .o_size_no_padding = 0,
				     .o_fields = nullptr };

	unsigned int timeout = (argc == 3) ? (unsigned int)atoi(argv[2]) : 0;
	unsigned int elapsed = 0;

	PX4_INFO("Waiting for topic %s timeout %u", argv[1], timeout);

	while (orb_exists(&meta, 0) != 0 && (timeout && (elapsed < timeout)))
	{
		usleep( 1000*1000 );
		elapsed += 1;
	}

	return 0;
}
